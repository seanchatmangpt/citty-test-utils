@startuml Analysis Verbs Deployment Diagram

!theme plain
skinparam backgroundColor #FFFFFF
skinparam nodeStyle rectangle
skinparam packageStyle rectangle

title CTU Analysis Verbs - Deployment Architecture\nSystem Integration and Dependencies

package "Citty Test Utils Ecosystem" {
  package "CLI Application" {
    [Main CLI Entry Point] as MainCLI
    [Command Router] as CmdRouter
    [Analysis Command Group] as AnalysisGroup
  }
  
  package "Analysis Commands" {
    [analyze] as AnalyzeCmd
    [stats] as StatsCmd
    [report] as ReportCmd
    [export] as ExportCmd
    [ast-analyze] as AstAnalyzeCmd
  }
  
  package "Core Analysis Engine" {
    [Enhanced AST CLI Analyzer] as ASTEngine
    [Legacy CLI Coverage Analyzer] as LegacyEngine
  }
  
  package "AST Processing Libraries" {
    [acorn] as AcornParser
    [acorn-walk] as AcornWalker
  }
  
  package "Utility Libraries" {
    [fs] as FileSystem
    [path] as PathUtils
    [n3] as RDFLibrary
  }
}

package "Target CLI Applications" {
  [CLI Definition Files] as CLIFiles
  [Command Modules] as CmdModules
  [Test Files] as TestFiles
}

package "Output Destinations" {
  [Console Output] as Console
  [File System] as FileOutput
  [JSON Files] as JSONFiles
  [Turtle/RDF Files] as RDFFiles
}

package "External Dependencies" {
  database "Node.js Runtime" as NodeJS {
    [V8 JavaScript Engine]
    [File System API]
    [Process API]
  }
  
  database "Package Manager" as NPM {
    [citty]
    [acorn]
    [acorn-walk]
    [n3]
  }
}

' Main application flow
MainCLI --> CmdRouter
CmdRouter --> AnalysisGroup
AnalysisGroup --> AnalyzeCmd
AnalysisGroup --> StatsCmd
AnalysisGroup --> ReportCmd
AnalysisGroup --> ExportCmd
AnalysisGroup --> AstAnalyzeCmd

' Command to engine connections
AnalyzeCmd --> ASTEngine
StatsCmd --> ASTEngine
ReportCmd --> ASTEngine
AstAnalyzeCmd --> ASTEngine
ExportCmd --> ASTEngine
ExportCmd --> LegacyEngine

' Engine to library connections
ASTEngine --> AcornParser
ASTEngine --> AcornWalker
LegacyEngine --> RDFLibrary
ASTEngine --> FileSystem
ASTEngine --> PathUtils
LegacyEngine --> FileSystem
LegacyEngine --> PathUtils

' Data source connections
ASTEngine --> CLIFiles
ASTEngine --> CmdModules
ASTEngine --> TestFiles
LegacyEngine --> CLIFiles
LegacyEngine --> TestFiles

' Output connections
AnalyzeCmd --> Console
AnalyzeCmd --> FileOutput
StatsCmd --> Console
ReportCmd --> Console
ReportCmd --> FileOutput
ExportCmd --> JSONFiles
ExportCmd --> RDFFiles
AstAnalyzeCmd --> Console
AstAnalyzeCmd --> FileOutput

' External dependency connections
MainCLI --> NodeJS
ASTEngine --> NodeJS
LegacyEngine --> NodeJS
AcornParser --> NPM
AcornWalker --> NPM
RDFLibrary --> NPM

' Deployment annotations
note right of MainCLI
  **Entry Point**
  - src/cli.mjs
  - Main application entry
  - Command routing
end note

note right of AnalysisGroup
  **Command Group**
  - src/commands/analysis.js
  - Analysis verb definitions
  - Parameter validation
end note

note right of ASTEngine
  **Primary Engine**
  - src/core/coverage/enhanced-ast-cli-analyzer.js
  - AST-based analysis
  - Import tracking
  - Precise coverage calculation
end note

note right of LegacyEngine
  **Legacy Engine**
  - src/core/coverage/cli-coverage-analyzer.js
  - Help-based analysis
  - Turtle/RDF support
  - Backward compatibility
end note

note right of CLIFiles
  **Target CLI**
  - src/cli.mjs (or specified)
  - Command definitions
  - Subcommand imports
  - Argument specifications
end note

note right of TestFiles
  **Test Suite**
  - test/**/*.test.mjs
  - runCitty/runLocalCitty calls
  - Test patterns
  - Coverage data source
end note

' System characteristics
note bottom of NodeJS
  **Runtime Requirements:**
  - Node.js 18+
  - ES2022 support
  - File system access
  - Process execution
end note

note bottom of NPM
  **Dependencies:**
  - citty: CLI framework
  - acorn: JavaScript parser
  - acorn-walk: AST traversal
  - n3: RDF/Turtle support
end note

' Performance characteristics
note top
  **Performance Profile:**
  - AST parsing: O(n) where n = file size
  - Test discovery: O(m) where m = test files
  - Coverage calculation: O(c√ót) where c = commands, t = tests
  - Memory usage: O(n+m) for AST storage
end note

' Scalability considerations
note top
  **Scalability:**
  - Parallel test file processing
  - AST caching for repeated analysis
  - Memory-efficient data structures
  - Configurable timeouts and limits
end note

@enduml
