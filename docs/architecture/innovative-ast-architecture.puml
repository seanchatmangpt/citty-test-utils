@startuml CTU Analysis Verbs - Innovative AST Architecture

!theme aws-orange
skinparam backgroundColor #FAFAFA
skinparam componentStyle rectangle
skinparam packageStyle rectangle
skinparam noteBackgroundColor #FFF3E0
skinparam noteBorderColor #FF9800

title CTU Analysis Verbs - Innovative AST-Based Architecture\n🚀 Next-Generation CLI Coverage Analysis System

package "🎯 Command Interface Layer" as CMD_LAYER {
  component [📱 Analysis Command Router] as Router {
    [Command Dispatcher]
    [Parameter Validator]
    [Context Builder]
  }
  
  component [🔍 Analyze Command] as AnalyzeCmd {
    [AST Analysis Client]
    [Report Orchestrator]
    [Output Manager]
  }
  
  component [📊 Stats Command] as StatsCmd {
    [Statistics Engine]
    [Summary Generator]
    [Console Renderer]
  }
  
  component [📄 Report Command] as ReportCmd {
    [Report Builder]
    [Format Selector]
    [File Handler]
  }
  
  component [📤 Export Command] as ExportCmd {
    [Export Manager]
    [Format Router]
    [Legacy Bridge]
  }
  
  component [🚀 AST Analyze Command] as AstAnalyzeCmd {
    [Enhanced AST Client]
    [Direct Processing]
    [Advanced Output]
  }
}

package "🧠 Core Analysis Engine" as ENGINE_LAYER {
  component [⚡ Enhanced AST CLI Analyzer] as ASTEngine {
    interface "ICLIAnalyzer" as IAnalyzer
    
    [🔍 CLI Structure Discovery]
    [📦 Import Command Tracker]
    [🧪 Test Pattern Discovery]
    [📈 Coverage Calculator]
    [📋 Report Generator]
    [💡 Recommendation Engine]
  }
  
  component [🔄 Legacy CLI Coverage Analyzer] as LegacyEngine {
    interface "ICLIAnalyzer" as ILegacy
    
    [📝 Help Output Parser]
    [🔍 Regex Pattern Matcher]
    [📊 Basic Coverage Calculator]
    [🐢 Turtle Report Generator]
  }
}

package "⚡ AST Processing Core" as AST_LAYER {
  component [🎯 JavaScript Parser] as Parser {
    [Acorn Parser Engine]
    [AST Builder]
    [Syntax Validator]
    [Error Recovery]
  }
  
  component [🚶 AST Walker] as Walker {
    [Node Visitor Pattern]
    [Pattern Matcher]
    [Context Tracker]
    [Memory Optimizer]
  }
  
  component [🏗️ Command Definition Parser] as CmdParser {
    [defineCommand Extractor]
    [Meta Object Parser]
    [Subcommand Resolver]
    [Argument Parser]
    [Type Inferencer]
  }
  
  component [🔗 Import Resolution Engine] as ImportEngine {
    [Import Statement Parser]
    [Module Path Resolver]
    [Command Mapping]
    [Dependency Tracker]
    [Circular Dependency Detector]
  }
}

package "🧪 Test Analysis Engine" as TEST_LAYER {
  component [📁 Test File Discovery] as TestDiscovery {
    [File System Scanner]
    [Pattern Matcher]
    [Exclusion Filter]
    [Parallel Processor]
  }
  
  component [🎯 Test Pattern Extractor] as PatternExtractor {
    [runCitty Call Parser]
    [runLocalCitty Call Parser]
    [Argument Array Extractor]
    [Command Chain Builder]
    [Template Literal Parser]
  }
  
  component [📊 Test Coverage Mapper] as CoverageMapper {
    [Command Usage Tracker]
    [Flag Usage Tracker]
    [Option Usage Tracker]
    [Coverage Matrix Builder]
    [Statistical Analyzer]
  }
}

package "📊 Data Processing Layer" as DATA_LAYER {
  component [📈 Coverage Calculator] as CoverageCalc {
    [Command Coverage Engine]
    [Subcommand Coverage Engine]
    [Flag Coverage Engine]
    [Option Coverage Engine]
    [Overall Statistics Engine]
    [Trend Analyzer]
  }
  
  component [📋 Report Generator] as ReportGen {
    [Metadata Builder]
    [Coverage Details Generator]
    [Recommendation Generator]
    [Summary Statistics Builder]
    [Visualization Data Prep]
  }
  
  component [🔄 Format Converter] as FormatConv {
    [Text Formatter]
    [JSON Serializer]
    [Turtle Generator]
    [RDF Builder]
    [Markdown Generator]
  }
}

package "📤 Output Layer" as OUTPUT_LAYER {
  component [🖥️ Console Output] as ConsoleOutput {
    [Text Renderer]
    [Progress Indicator]
    [Error Display]
    [Success Messages]
    [Color Formatter]
  }
  
  component [💾 File Output] as FileOutput {
    [File Writer]
    [Path Validator]
    [Permission Checker]
    [Write Confirmation]
    [Atomic Operations]
  }
  
  component [🌊 Stream Output] as StreamOutput {
    [Stdout Writer]
    [Stderr Writer]
    [Buffer Manager]
    [Backpressure Handler]
  }
}

package "📦 Data Models" as MODELS_LAYER {
  class [CLI Structure] as CLIStruct {
    +commands: Map<string, Command>
    +globalOptions: Map<string, Option>
    +imports: Map<string, ImportInfo>
    +metadata: AnalysisMetadata
  }
  
  class [Test Patterns] as TestPatterns {
    +commandPatterns: Map<string, CommandPattern>
    +flagPatterns: Map<string, FlagPattern>
    +optionPatterns: Map<string, OptionPattern>
    +testFiles: string[]
  }
  
  class [Coverage Report] as CoverageReport {
    +summary: CoverageSummary
    +details: CoverageDetails
    +recommendations: Recommendation[]
    +metadata: ReportMetadata
  }
  
  class [Analysis Context] as AnalysisContext {
    +cliPath: string
    +testDir: string
    +options: AnalysisOptions
    +verbose: boolean
  }
}

' Command Interface connections
Router --> AnalyzeCmd : routes
Router --> StatsCmd : routes
Router --> ReportCmd : routes
Router --> ExportCmd : routes
Router --> AstAnalyzeCmd : routes

' Core Analysis Engine connections
AnalyzeCmd --> ASTEngine : uses
StatsCmd --> ASTEngine : uses
ReportCmd --> ASTEngine : uses
AstAnalyzeCmd --> ASTEngine : uses
ExportCmd --> ASTEngine : uses (JSON)
ExportCmd --> LegacyEngine : uses (Turtle)

' AST Processing Core connections
ASTEngine --> Parser : parses
Parser --> Walker : walks
Walker --> CmdParser : extracts
CmdParser --> ImportEngine : resolves
ASTEngine --> ImportEngine : tracks

' Test Analysis Engine connections
ASTEngine --> TestDiscovery : discovers
TestDiscovery --> PatternExtractor : extracts
PatternExtractor --> CoverageMapper : maps
CoverageMapper --> ASTEngine : provides

' Data Processing Layer connections
ASTEngine --> CoverageCalc : calculates
LegacyEngine --> CoverageCalc : calculates
CoverageCalc --> ReportGen : generates
ReportGen --> FormatConv : converts

' Output Layer connections
AnalyzeCmd --> ConsoleOutput : outputs
AnalyzeCmd --> FileOutput : outputs
StatsCmd --> ConsoleOutput : outputs
ReportCmd --> ConsoleOutput : outputs
ReportCmd --> FileOutput : outputs
ExportCmd --> FileOutput : outputs
AstAnalyzeCmd --> ConsoleOutput : outputs
AstAnalyzeCmd --> FileOutput : outputs

FormatConv --> ConsoleOutput : formats
FormatConv --> FileOutput : formats
FormatConv --> StreamOutput : formats

' Data Models connections
ASTEngine --> CLIStruct : builds
TestDiscovery --> TestPatterns : builds
CoverageCalc --> CoverageReport : builds
Router --> AnalysisContext : creates

CLIStruct --> CoverageCalc : provides
TestPatterns --> CoverageCalc : provides
CoverageReport --> ReportGen : provides
AnalysisContext --> ASTEngine : configures

' Interface implementations
ASTEngine ..|> IAnalyzer : implements
LegacyEngine ..|> ILegacy : implements

' Innovation annotations
note right of ASTEngine
  **🚀 AST Innovation Engine**
  - Parses actual CLI definition files
  - Tracks imported commands dynamically
  - Provides 100% accurate structure discovery
  - Enables precise coverage analysis
end note

note right of ImportEngine
  **🔗 Smart Import Resolution**
  - Detects command imports from ./commands/*.js
  - Maps imported commands to source files
  - Enables subcommand discovery
  - Handles circular dependencies
end note

note right of CoverageMapper
  **📊 Advanced Coverage Mapping**
  - AST-based test pattern extraction
  - Precise command usage tracking
  - Statistical analysis and trends
  - Real-time coverage calculation
end note

note right of CoverageCalc
  **📈 Intelligent Coverage Calculation**
  - Multi-dimensional coverage analysis
  - Trend analysis and predictions
  - Smart recommendation generation
  - Performance-optimized algorithms
end note

note right of FormatConv
  **🔄 Universal Format Converter**
  - Extensible format support
  - High-performance serialization
  - Memory-efficient processing
  - Streaming output support
end note

' Performance characteristics
note bottom of ASTEngine
  **⚡ Performance Profile:**
  - AST Parsing: O(n) linear complexity
  - Import Resolution: O(m) where m = imports
  - Coverage Calculation: O(c×t) optimized
  - Memory Usage: O(n+m) efficient
end note

note bottom of TestDiscovery
  **🚀 Scalability Features:**
  - Parallel test file processing
  - AST caching for repeated analysis
  - Memory-optimized data structures
  - Configurable resource limits
end note

' Architecture principles
note top
  **🏗️ Architecture Principles:**
  - AST-First Design for accuracy
  - Separation of Concerns
  - Single Responsibility Principle
  - Open/Closed Principle
  - Dependency Inversion
  - Performance Optimization
end note

@enduml
